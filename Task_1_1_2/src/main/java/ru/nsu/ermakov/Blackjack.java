package ru.nsu.ermakov;

import java.io.InputStream;
import java.io.PrintStream;
import java.util.Scanner;

/**
 * –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ë–ª—ç–∫–¥–∂–µ–∫.
 */
public class Blackjack {
    private Deck deck;
    private final Player player = new Player("–ò–≥—Ä–æ–∫");
    private final Player dealer = new Player("–î–∏–ª–µ—Ä");
    private int scorePlayer = 0;
    private int scoreDealer = 0;
    private final Scanner scanner;
    private final PrintStream out;

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞.
     */
    public Blackjack() {
        this(System.in, System.out);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞.
     *
     * @param in  –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫
     * @param out –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫
     */
    public Blackjack(InputStream in, PrintStream out) {
        this.scanner = new Scanner(in);
        this.out = out;
        this.deck = new Deck(1);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –∫–æ–ª–æ–¥–æ–π (–¥–ª—è —Ç–µ—Å—Ç–æ–≤).
     *
     * @param in   –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫
     * @param out  –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫
     * @param deck –∫–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–ª–æ–¥–∞
     */
    public Blackjack(InputStream in, PrintStream out, Deck deck) {
        this.scanner = new Scanner(in);
        this.out = out;
        this.deck = deck;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—É–Ω–¥–æ–≤.
     */
    public void start() {
        out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–ª—ç–∫–¥–∂–µ–∫!");
        int round = 1;
        while (true) {
            out.println("\n–†–∞—É–Ω–¥ " + round);
            playRound();
            out.printf("–°—á—ë—Ç %d:%d (–í—ã : –î–∏–ª–µ—Ä)%n", scorePlayer, scoreDealer);
            out.print("–ò–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞—É–Ω–¥? (y/n): ");
            if (!scanner.next().equalsIgnoreCase("y")) {
                break;
            }
            round++;
        }
    }

    /**
     * –ü—Ä–æ–≤–æ–¥–∏—Ç –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã.
     */
    public void playRound() {
        player.clearHand();
        dealer.clearHand();

        player.addCard(deck.draw());
        dealer.addCard(deck.draw());
        player.addCard(deck.draw());
        dealer.addCard(deck.draw());

        out.println("–î–∏–ª–µ—Ä —Ä–∞–∑–¥–∞–ª –∫–∞—Ä—Ç—ã");
        out.println("–í–∞—à–∏ –∫–∞—Ä—Ç—ã: " + player.showHand(false));
        out.println("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: " + dealer.showHand(true));

        if (player.getScore() == 21) {
            out.println("–£ –≤–∞—Å –±–ª—ç–∫–¥–∂–µ–∫! üéâ");
            scorePlayer++;
            return;
        }

        while (true) {
            out.println("\n–í–∞—à —Ö–æ–¥");
            out.print("–í–≤–µ–¥–∏—Ç–µ '1', —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É, –∏ '0', —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è: ");
            int choice = scanner.hasNextInt() ? scanner.nextInt() : 0;
            if (choice == 1) {
                Card card = deck.draw();
                player.addCard(card);
                out.println("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ä—Ç—É " + card);
                out.println("–í–∞—à–∏ –∫–∞—Ä—Ç—ã: " + player.showHand(false));
                if (player.getScore() > 21) {
                    out.println("–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Ä–∞—É–Ω–¥.");
                    scoreDealer++;
                    return;
                }
            } else {
                break;
            }
        }

        out.println("\n–•–æ–¥ –¥–∏–ª–µ—Ä–∞");
        out.println("–î–∏–ª–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É: " + dealer.getHand().get(1));
        out.println("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: " + dealer.showHand(false));

        while (dealer.getScore() < 17) {
            Card card = deck.draw();
            dealer.addCard(card);
            out.println("–î–∏–ª–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É " + card);
            out.println("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: " + dealer.showHand(false));
        }

        int p = player.getScore();
        int d = dealer.getScore();

        if (d > 21 || p > d) {
            out.println("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä–∞—É–Ω–¥!");
            scorePlayer++;
        } else if (p == d) {
            out.println("–ù–∏—á—å—è!");
        } else {
            out.println("–î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥!");
            scoreDealer++;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Å—á—ë—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ —Ä–∞—É–Ω–¥–∞–º.
     *
     * @return —Å—á—ë—Ç –∏–≥—Ä–æ–∫–∞
     */
    public int getPlayerScoreTotal() {
        return scorePlayer;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Å—á—ë—Ç –¥–∏–ª–µ—Ä–∞ –ø–æ —Ä–∞—É–Ω–¥–∞–º.
     *
     * @return —Å—á—ë—Ç –¥–∏–ª–µ—Ä–∞
     */
    public int getDealerScoreTotal() {
        return scoreDealer;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞.
     *
     * @return –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
     */
    public Player getPlayer() {
        return player;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–ª–µ—Ä–∞.
     *
     * @return –æ–±—ä–µ–∫—Ç –¥–∏–ª–µ—Ä–∞
     */
    public Player getDealer() {
        return dealer;
    }

    /**
     * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É.
     *
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     */
    public static void main(String[] args) {
        new Blackjack().start();
    }
}
